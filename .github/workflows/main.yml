name: CI/CD Full Workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "16 3 * * 2"

env:
  BACKEND_IMAGE_NAME: f1-backend
  FRONTEND_IMAGE_NAME: f1-frontend

jobs:
  # INSTALL
  install-backend:
    name: Install Backend Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
      - run: cd server && npm ci

  install-client:
    name: Install Client Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
      - run: cd client && npm ci

  # LINT
  lint-backend:
    name: Lint Backend
    runs-on: ubuntu-latest
    needs: install-backend
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
      - run: cd server && npm ci && npm run lint

  lint-client:
    name: Lint Client
    runs-on: ubuntu-latest
    needs: install-client
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
      - run: cd client && npm ci && npm run lint

  # TEST
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: install-backend
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: secret
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgres://postgres:secret@localhost:5432/postgres
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
      - run: cd server && npm ci && npm test

  test-client:
    name: Test Client
    runs-on: ubuntu-latest
    needs: install-client
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
      - run: cd client && npm ci && npm test

  # CODEQL
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: actions
            build-mode: none
          - language: javascript-typescript
            build-mode: none
    steps:
      - uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
      - if: matrix.build-mode == 'manual'
        run: echo 'Manual build mode not supported yet' && exit 1
      - uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # DOCKER
  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-client]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/$BACKEND_IMAGE_NAME:latest -f server/Dockerfile ./server
      - run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/$BACKEND_IMAGE_NAME:latest
      - run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/$FRONTEND_IMAGE_NAME:latest -f client/Dockerfile ./client
      - run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/$FRONTEND_IMAGE_NAME:latest

  # TRIVY
  trivy:
    name: Trivy Image Scan
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v3
      - run: docker build -t backend-image ./server
      - run: docker build -t frontend-image ./client
      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy
      - run: trivy image --severity HIGH,CRITICAL backend-image
      - run: trivy image --severity HIGH,CRITICAL frontend-image

  # SNYK
  snyk:
    name: Snyk Vulnerability Scan
    runs-on: ubuntu-latest
    needs: [test-backend, test-client]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install -g snyk
      - run: npm install
        working-directory: ./server
      - run: snyk test --severity-threshold=high
        working-directory: ./server
        env:
          SNYK_TOKEN: b9898c46-f1dd-407b-be7c-2661c0f387e1
      - run: npm install
        working-directory: ./client
      - run: snyk test --severity-threshold=high
        working-directory: ./client
        env:
          SNYK_TOKEN: b9898c46-f1dd-407b-be7c-2661c0f387e1
